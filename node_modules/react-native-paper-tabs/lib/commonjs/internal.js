"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIndicator = useIndicator;
exports.useOffsetScroller = useOffsetScroller;
exports.useAnimatedText = useAnimatedText;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getIndicatorStyle({
  left,
  width
}) {
  return {
    transform: [{
      scaleX: width
    }, {
      translateX: roundToTwo(left / width) || 0
    }]
  };
}

function roundToTwo(num) {
  return Math.round(num * 100 + Number.EPSILON) / 100;
}

function useIndicator({
  index,
  layouts
}) {
  const indicatorRef = React.useRef(null);
  const updateIndicator = React.useCallback(() => {
    if (!indicatorRef.current || !layouts.current) {
      return;
    }

    const cl = layouts.current[index];

    if (cl) {
      indicatorRef.current.setNativeProps({
        style: getIndicatorStyle({
          left: cl.x,
          width: cl.width
        })
      });
    }
  }, [index, indicatorRef, layouts]); // update indicator when index changes (updateIndicator function changes to new reference when index changes)

  React.useEffect(() => {
    updateIndicator();
  }, [updateIndicator]);
  return [indicatorRef, updateIndicator, null];
}

function useOffsetScroller(_) {}

function useAnimatedText({
  activeColor,
  active,
  textColor
}) {
  return React.useMemo(() => ({
    color: active ? activeColor : textColor,
    opacity: active ? 1 : 0.6
  }), [active, activeColor, textColor]);
}
//# sourceMappingURL=internal.js.map