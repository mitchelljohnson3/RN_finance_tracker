{"version":3,"sources":["internal.ts"],"names":["getIndicatorStyle","left","width","transform","scaleX","translateX","roundToTwo","num","Math","round","Number","EPSILON","useIndicator","index","layouts","indicatorRef","React","useRef","updateIndicator","useCallback","current","cl","setNativeProps","style","x","useEffect","useOffsetScroller","_","useAnimatedText","activeColor","active","textColor","useMemo","color","opacity"],"mappings":";;;;;;;;;AAAA;;;;;;AASA,SAASA,iBAAT,CAA2B;AACzBC,EAAAA,IADyB;AAEzBC,EAAAA;AAFyB,CAA3B,EAMc;AACZ,SAAO;AACLC,IAAAA,SAAS,EAAE,CACT;AAAEC,MAAAA,MAAM,EAAEF;AAAV,KADS,EAET;AAAEG,MAAAA,UAAU,EAAEC,UAAU,CAACL,IAAI,GAAGC,KAAR,CAAV,IAA4B;AAA1C,KAFS;AADN,GAAP;AAMD;;AAED,SAASI,UAAT,CAAoBC,GAApB,EAAiC;AAC/B,SAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAN,GAAYG,MAAM,CAACC,OAA9B,IAAyC,GAAhD;AACD;;AAEM,SAASC,YAAT,CAAsB;AAC3BC,EAAAA,KAD2B;AAE3BC,EAAAA;AAF2B,CAAtB,EAG6B;AAClC,QAAMC,YAAY,GAAGC,KAAK,CAACC,MAAN,CAAmB,IAAnB,CAArB;AACA,QAAMC,eAAe,GAAGF,KAAK,CAACG,WAAN,CAAkB,MAAM;AAC9C,QAAI,CAACJ,YAAY,CAACK,OAAd,IAAyB,CAACN,OAAO,CAACM,OAAtC,EAA+C;AAC7C;AACD;;AACD,UAAMC,EAAE,GAAGP,OAAO,CAACM,OAAR,CAAgBP,KAAhB,CAAX;;AACA,QAAIQ,EAAJ,EAAQ;AACNN,MAAAA,YAAY,CAACK,OAAb,CAAqBE,cAArB,CAAoC;AAClCC,QAAAA,KAAK,EAAEvB,iBAAiB,CAAC;AAAEC,UAAAA,IAAI,EAAEoB,EAAE,CAACG,CAAX;AAActB,UAAAA,KAAK,EAAEmB,EAAE,CAACnB;AAAxB,SAAD;AADU,OAApC;AAGD;AACF,GAVuB,EAUrB,CAACW,KAAD,EAAQE,YAAR,EAAsBD,OAAtB,CAVqB,CAAxB,CAFkC,CAclC;;AACAE,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpBP,IAAAA,eAAe;AAChB,GAFD,EAEG,CAACA,eAAD,CAFH;AAIA,SAAO,CAACH,YAAD,EAAeG,eAAf,EAAgC,IAAhC,CAAP;AACD;;AAEM,SAASQ,iBAAT,CAA2BC,CAA3B,EAAgD,CAAE;;AAClD,SAASC,eAAT,CAAyB;AAC9BC,EAAAA,WAD8B;AAE9BC,EAAAA,MAF8B;AAG9BC,EAAAA;AAH8B,CAAzB,EAI0B;AAC/B,SAAOf,KAAK,CAACgB,OAAN,CACL,OAAO;AACLC,IAAAA,KAAK,EAAEH,MAAM,GAAGD,WAAH,GAAiBE,SADzB;AAELG,IAAAA,OAAO,EAAEJ,MAAM,GAAG,CAAH,GAAO;AAFjB,GAAP,CADK,EAKL,CAACA,MAAD,EAASD,WAAT,EAAsBE,SAAtB,CALK,CAAP;AAOD","sourcesContent":["import * as React from 'react';\nimport type { TextStyle, View, ViewStyle } from 'react-native';\nimport type {\n  AnimatedColorArgs,\n  IndicatorArgs,\n  IndicatorReturns,\n  OffsetScrollArgs,\n} from './utils';\n\nfunction getIndicatorStyle({\n  left,\n  width,\n}: {\n  left: number;\n  width: number;\n}): ViewStyle {\n  return {\n    transform: [\n      { scaleX: width },\n      { translateX: roundToTwo(left / width) || 0 },\n    ],\n  };\n}\n\nfunction roundToTwo(num: number) {\n  return Math.round(num * 100 + Number.EPSILON) / 100;\n}\n\nexport function useIndicator({\n  index,\n  layouts,\n}: IndicatorArgs): IndicatorReturns {\n  const indicatorRef = React.useRef<View>(null);\n  const updateIndicator = React.useCallback(() => {\n    if (!indicatorRef.current || !layouts.current) {\n      return;\n    }\n    const cl = layouts.current[index];\n    if (cl) {\n      indicatorRef.current.setNativeProps({\n        style: getIndicatorStyle({ left: cl.x, width: cl.width }),\n      });\n    }\n  }, [index, indicatorRef, layouts]);\n\n  // update indicator when index changes (updateIndicator function changes to new reference when index changes)\n  React.useEffect(() => {\n    updateIndicator();\n  }, [updateIndicator]);\n\n  return [indicatorRef, updateIndicator, null];\n}\n\nexport function useOffsetScroller(_: OffsetScrollArgs) {}\nexport function useAnimatedText({\n  activeColor,\n  active,\n  textColor,\n}: AnimatedColorArgs): TextStyle {\n  return React.useMemo(\n    () => ({\n      color: active ? activeColor : textColor,\n      opacity: active ? 1 : 0.6,\n    }),\n    [active, activeColor, textColor]\n  );\n}\n"]}