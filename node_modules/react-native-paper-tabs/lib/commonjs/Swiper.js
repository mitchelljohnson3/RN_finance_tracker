"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _context = require("./context");

var _TabsHeader = _interopRequireDefault(require("./TabsHeader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Swiper(props) {
  const {
    theme,
    dark,
    style,
    defaultIndex,
    onChangeIndex,
    iconPosition,
    showTextLabel,
    showLeadingSpace,
    uppercase,
    mode
  } = props;
  const [index, setIndex] = React.useState(defaultIndex || 0);
  const goTo = React.useCallback(ind => {
    setIndex(ind);
    onChangeIndex(ind);
  }, [setIndex, onChangeIndex]);
  let children = props.children;
  const currentScreen = children[index];

  if (!currentScreen) {
    return null;
  }

  const renderProps = {
    index,
    goTo,
    children,
    theme,
    dark,
    style,
    offset: undefined,
    position: undefined,
    iconPosition,
    showTextLabel,
    showLeadingSpace,
    uppercase,
    mode
  };
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.root
  }, /*#__PURE__*/React.createElement(_TabsHeader.default, renderProps), /*#__PURE__*/React.createElement(_context.TabsContext.Provider, {
    value: {
      goTo,
      index
    }
  }, currentScreen));
}

const styles = _reactNative.StyleSheet.create({
  root: {
    flex: 1
  }
});

var _default = Swiper;
exports.default = _default;
//# sourceMappingURL=Swiper.js.map